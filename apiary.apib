FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Public Service API

Polls is a simple API allowing consumers to view polls and vote in them.

# Polls API Root [/]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "questions_url": "/questions"
        }

## Group Question

Resources related to questions in the API.

## Question [/questions/{question_id}]

A Question object has the following attributes:

+ question
+ published_at - An ISO8601 date when the question was published.
+ url
+ choices - An array of Choice objects.

+ Parameters
    + question_id (required, number, `1`) ... ID of the Question in form of an integer

### View a Questions Detail [GET]

+ Response 200 (application/json)

                {
                    "question": "Favourite programming language?",
                    "published_at": "2014-11-11T08:40:51.620Z",
                    "url": "/questions/1",
                    "choices": [
                        {
                            "choice": "Swift",
                            "url": "/questions/1/choices/1",
                            "votes": 2048
                        }, {
                            "choice": "Python",
                            "url": "/questions/1/choices/2",
                            "votes": 1024
                        }, {
                            "choice": "Objective-C",
                            "url": "/questions/1/choices/3",
                            "votes": 512
                        }, {
                            "choice": "Ruby",
                            "url": "/questions/1/choices/4",
                            "votes": 256
                        }
                    ]
                }

## Choice [/questions/{question_id}/choices/{choice_id}]

+ Parameters
    + question_id (required, number, `1`) ... ID of the Question in form of an integer
    + choice_id (required, number, `1`) ... ID of the Choice in form of an integer

### Vote on a Choice [POST]

This action allows you to vote on a question's choice.

+ Response 201

    + Headers

            Location: /questions/1

## Questions Collection [/questions{?page}]

+ Parameters
    + page (optional, number, `1`) ... The page of questions to return

### List All Questions [GET]

+ Response 200 (application/json)

    + Headers

            Link: </questions?page=2>; rel="next"

    + Body

            [
                {
                    "question": "Favourite programming language?",
                    "published_at": "2014-11-11T08:40:51.620Z",
                    "url": "/questions/1",
                    "choices": [
                        {
                            "choice": "Swift",
                            "url": "/questions/1/choices/1",
                            "votes": 2048
                        }, {
                            "choice": "Python",
                            "url": "/questions/1/choices/2",
                            "votes": 1024
                        }, {
                            "choice": "Objective-C",
                            "url": "/questions/1/choices/3",
                            "votes": 512
                        }, {
                            "choice": "Ruby",
                            "url": "/questions/1/choices/4",
                            "votes": 256
                        }
                    ]
                }
            ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ question (string) - The question
+ choices (array[string]) - A collection of choices.

+ Request (application/json)

            {
                "question": "Favourite programming language?",
                "choices": [
                    "Swift",
                    "Python",
                    "Objective-C",
                    "Ruby"
                ]
            }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

                {
                    "question": "Favourite programming language?",
                    "published_at": "2014-11-11T08:40:51.620Z",
                    "url": "/questions/2",
                    "choices": [
                        {
                            "choice": "Swift",
                            "url": "/questions/2/choices/1",
                            "votes": 0
                        }, {
                            "choice": "Python",
                            "url": "/questions/2/choices/2",
                            "votes": 0
                        }, {
                            "choice": "Objective-C",
                            "url": "/questions/2/choices/3",
                            "votes": 0
                        }, {
                            "choice": "Ruby",
                            "url": "/questions/2/choices/4",
                            "votes": 0
                        }
                    ]
                }

## Group User

Users managenent

## Users Collection [/users]

### List All Users [GET]
+ Response 200 (application/json)

    + Body
        
            {}
        
## User single [/users/{userUUID}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return

### User details [GET]
+ Response 200 (application/json)

    + Body
        
            {}
            
### User update [POST]
+ Response 200 (application/json)

    + Body
        
            {}

## Group Directs

Direct managment

## Direct collection [/users/{userUUID}/directs]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return

### List All Directs [GET]
+ Response 200 (application/json)

    + Headers

            Link: </questions?page=2>; rel="next"

    + Body
    
            {}
            
### Directs create [POST]
+ Response 200 (application/json)

    + Body
    
            {}
            
## Direct single [/users/{userUUID}/directs/{directUUID}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    + directUUID (required, string, `1`) ... The page of questions to return

### Direct Detais [GET]
+ Response 200 (application/json)

    + Body

            {}

### Direct update [POST]
+ Response 200 (application/json)

    + Body

            {}

### Delete direct [DELETE]
+ Response 200 (application/json)

    + Body

            {}

## Group Applications

Applications introduction

## Applications collection [/users/{userUUID}/applications]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    
### List all applications [GET]
+ Response 200 (applications/json)

    + Body
        
            {
              "self": {
                "id": null,
                "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838/applications"
              },
              "owner": {
                "id": "U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838",
                "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838"
              },
              "parent": {
                "id": "U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838",
                "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838"
              },
              "applications": [
                {
                  "self": {
                    "id": "P-0ba20202-051b-4c14-8806-f65da33b9f1e-98346",
                    "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838/applications/P-0ba20202-051b-4c14-8806-f65da33b9f1e-98346"
                  },
                  "id": "P-0ba20202-051b-4c14-8806-f65da33b9f1e-98346",
                  "name": "myDirect4ReadApp",
                  "authType": "basic",
                  "resources": "/direct",
                  "internal": false,
                  "userKey": "EMVuRWxA50SmbuVwtw0heq7bbsndfLXnIxOnVKpq_myDirect4ReadApp",
                  "userSecret": null,
                  "used": null,
                  "created": "2015-04-06T11:49:17.634+01:00",
                  "lastUsed": null,
                  "updated": null
                },
                {
                  "self": {
                    "id": "P-39420e02-b128-4e7e-858f-766f3ccc4972-74395",
                    "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838/applications/P-39420e02-b128-4e7e-858f-766f3ccc4972-74395"
                  },
                  "id": "P-39420e02-b128-4e7e-858f-766f3ccc4972-74395",
                  "name": "myDirect3ReadApp",
                  "authType": "oauth",
                  "resources": "/direct",
                  "internal": false,
                  "userKey": "enzmgdqItrKncOlOYjXxRKTDE0syF9idsItPWrK2_myDirect3ReadApp",
                  "userSecret": null,
                  "used": null,
                  "created": "2015-04-06T11:49:17.631+01:00",
                  "lastUsed": null,
                  "updated": null
                }
              ]
            }

### Create application [POST]
+ Response 200 (applications/json)

    + Body
        
            {}
            
## Application single [/users/{userUUID}/applications/{applicationUUID}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    + applicationUUID (required, string, `1`) ... The page of questions to return
    
### Application details [GET]
+ Response 200 (applications/json)

    + Body
    
            {}
            
### Application update [POST]
+ Request (application/json)

            {
              "name": "DwpD3GTiDpguCun9jTNEW",
              "authType": "basic",
              "resources": "/users,/ping"
            }
            
+ Response 200 (applications/json)

    + Body
    
            {
              "self": {
                "id": "P-620e55aa-c533-4dd0-b75f-056fbe2f014b-75323",
                "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838/applications/P-620e55aa-c533-4dd0-b75f-056fbe2f014b-75323"
              },
              "owner": {
                "id": "U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838",
                "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838"
              },
              "parent": {
                "id": "U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838",
                "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838"
              },
              "application": {
                "self": {
                  "id": "P-620e55aa-c533-4dd0-b75f-056fbe2f014b-75323",
                  "href": "http://localhost:8189/api/v1/users/U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838/applications/P-620e55aa-c533-4dd0-b75f-056fbe2f014b-75323"
                },
                "id": "P-620e55aa-c533-4dd0-b75f-056fbe2f014b-75323",
                "name": "DwpD3GTiDpguCun9jTNEW",
                "authType": "basic",
                "resources": "/users,/ping",
                "internal": false,
                "userKey": "5iVdN5ACDFG1Eqldt178Nsw7dr789IhT5OWregve_DwpD3GTiDpguCun9jT",
                "userSecret": null,
                "used": null,
                "created": "2015-04-18T06:59:35.954+01:00",
                "lastUsed": null,
                "updated": "2015-04-18T06:59:36.157+01:00"
              }
            }
            
### App Delete [DELETE]
+ Response 204 (applications/json)
            
## Group Endpoints

Endpoints description

## Endpoints collection [/users/{userUUID}/endpoints]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return

### List all endpoints [GET]
+ Response 200 (applications/json)

    + Body
        
            {}

### Create endpoint [POST]
+ Response 200 (applications/json)

    + Body
        
            {}

## Endpoint single [/users/{userUUID}/endpoints/{endpointUUID}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    + endpointUUID (required, string, `1`) ... The page of questions to return

### Endpoint details [GET]
+ Response 200 (applications/json)

    + Body
        
            {}

### Endpoint update [POST]
+ Response 200 (applications/json)

    + Body
        
            {}

### Delete [DELETE]
+ Response 200 (applications/json)

    + Body
        
            {}

## Group Values

Values description

## Sources collection [/users/{userUUID}/values/{serviceId}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    + serviceId (required, string, `1`) ... The page of questions to return

### List all sources [GET]
+ Response 200 (applications/json)

    + Body
        
            {}

## Values collection [/users/{userUUID}/values/{serviceId}/{sourceId}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    + serviceId (required, string, `1`) ... The page of questions to return
    + sourceId (required, string, `1`) ... The page of questions to return
    
### Source details [GET]
+ Response 200 (applications/json)

    + Body
        
            {}

### Delete source [DELETE]
+ Response 200 (applications/json)

    + Body
        
            {}

## Slot operation [/users/{userUUID}/values/{serviceId}/{sourceId}/{slotNo}]
+ Parameters
    + userUUID (required, string, `U-f8053d8e-68b7-4a75-a218-83efd09cdca7-35838`) ... The page of questions to return
    + serviceId (required, string, `1`) ... The page of questions to return
    + sourceId (required, string, `1`) ... The page of questions to return
    + slotNo (required, string, `1`) ... The page of questions to return
    
### Delete slot [DELETE]
+ Response 200 (applications/json)

    + Body
        
            {}